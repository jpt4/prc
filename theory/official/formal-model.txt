A mathematical formalization of the Universal Cell

jpt4

UTC20161208-10,25;20170102;20170201

sta typ ups inp out mem aut con buf
s   t   u   i   o   m   a   c   b

activation:
qa0 t=* u=* i=* o=* m=* a=* c=* b=*
  | | +--{t = wire}--{ }-->  wire: qw0 u=* i=* o=* m=*
  | +--{t = proc}--{ }-->  proc: qp0 u=* i=* o=* m=*
  +--{t = stem}--{ }-->  stem: qs0 u=* i=* o=* m=* a=* c=* b=*

qhuo:
qhuo  --{ }--{u -> *, o -> *}-->  qa0

qhu:
qhu  --{ }--{u -> *}-->  qa0

wire:
qw0 u=* i=* o=* m=*
  | +--{o = !e}--{ }-->  [qhuo]
  +--{o = e}--{ }-->
    qw1 * * e *  
      | +--{u = e}--{ }-->  [qhu]
      +--{u = !e}--{u -> e, i -> u}-->
        qw2 e u e *  
          | +--{i = Esi}--{t -> stem, i -> e, m -> r, a -> e, c -> e, b -> e}-->
          |   qw3 stem e e e r e e e  
          |     +--{ }--{ }-->  [qhu]
          +--{i = ss}--{ }-->  
            qw4 e ss e * 
              | +--{m = r}--{i -> e, o -> ir}-->  
              |   qw5 e e ir r  
              |     +--{ }--{ }-->  [qhuo]
              +--{m = l}--{i -> e, o -> il}-->
                qw6 e e il l  
                  +--{ }--{ }-->  [qhuo]

proc:
qp0 u=* i=* o=* m=*
  | +--{o = !e}--{ }-->  [qhuo]
  +--{o = e}--{ }-->
    qp1 * * e *  
      | +--{u = e}--{ }-->  [qhu]
      +--{u = !e}--{u -> e, i -> u}-->
        qp2 e u e *  
          | +--{i = Esi}--{t -> stem, i -> e, m -> r, a -> e, c -> e, b -> e}-->
          |   qp3 stem e e e r e e e  
          |     +--{ }--{ }-->  [qhu]
          +--{i = ss}--{ }-->  
            qp4 e ss e * 
              | +--{m = r}--{i -> e, o -> ir, m -> l}-->  
              |   qp5 e e ir l  
              |     +--{ }--{ }-->  [qhuo]
              +--{m = l}--{i -> e, o -> il, m -> r}-->
                qp6 e e il r  
                  +--{ }--{ }-->  [qhuo]

stem:
qs0 u=* i=* o=* m=* a=* c=* b=*
  | +--{o = !e}--{ }-->  [qhuo]
  +--{o = e}--{ }-->  
    qs1 * * e * * * *  
      | | +--{c = xout}--{o -> b1@x, b -> b/b1}-->  
      | |   qs2 * * b1@x * * xout b/b1  
      | |     | +--{b = !e}--{ }-->  [qhuo]
      | |     +--{b = e}--{c -> e}--> 
      | |       qs3 * * b1@x * * e e
      | |         +--{ }--{ }-->  [qhuo]
      | +--{c = e}--{ }--> 
      |   qs4 * * e * * e *  
      |     | +--{a = e}--{ }-->  
      |     |   qs5 * * e * e e *
      |     |     | +--{u = e}--{ }--> [qhu]
      |     |     +--{u = !e}--{u -> e, i -> u}-->
      |     |       qs6 e u e * e e *
      |     |         | +--{i = Esi | ss>1}--{i -> e}--> 
      |     |         |   qs7 e e e * e e * 
      |     |         |     +--{ }--{ }-->  [qhu]
      |     |         +--{i = sss@x}--{i -> e, c -> xin, b -> i}-->
      |     |           qs8 e e e * e xin i
      |     |             +--{ }--{ }-->  [qhu]
      |     +--{a = !e}--{ }-->  [qs9 * * e * !e e * process-automail]
      +--{c = xin}--{ }-->
        qs14 * * e * * xin *
          | +--{u = e}--{ }-->  [qhu]
          +--{u = !e}--{u -> e, i -> u}-->
            qs15 e u e * * xin *
              | +--{i = Esi | Esss@!x}--{i -> e}-->
              |   qs16 e e e * * xin *
              |     +--{ }--{ }-->  [qhu]
              +--{i = sss@x}--{i -> e, b -> b+i}-->
                qs17 e e e * * xin b+i
                  | +--{b = !full}--{ }-->  [qhu]
                  +--{b = full}--{ }-->  [qs18 e e e * * xin full process-buffer]

process-automail:
qs9 * * e * !e e *
  | | | +--{a = wr}--{t -> wire, i -> e, m -> r, a -> e, b -> e}-->
  | | |   qs10 wire * e e r e e e
  | | |     +--{ }--{ }-->  [qhu]
  | | +--{a = wl}--{t -> wire, i -> e, m -> l, a -> e, b -> e}-->
  | |   qs11 wire * e e l e e e
  | |     +--{ }--{ }-->  [qhu]
  | +--{a = pr}--{t -> proc, i -> e, m -> r, a -> e, b -> e}-->
  |   qs12 proc * e e r e e e
  |     +--{ }--{ }-->  [qhu]
  +--{a = pl}--{t -> proc, i -> e, m -> l, a -> e, b -> e}-->
    qs13 proc * e e r e e e
      +--{ }--{ }-->  [qhu]

process-buffer:
qs18 e e e * * xin full
  | | | | | | +--{b = id + msg}--{o -> b1@xr, a -> msg, c -> xrout, b -> b/b1}-->
  | | | | | |   q19 e e b1@xr * msg xrout b/b1
  | | | | | |     +--{ }--{ }-->  [qhuo]
  | | | | | +--{b = id + 10b5}--{o -> b1@xr, c -> xrout, b -> b/b1/b5}-->
  | | | | |   q20 e e b1@xr * * xrout b/b1/b5
  | | | | |     +--{ }--{ }-->  [qhuo]
  | | | | +--{b = id + 11b5}--{o -> b1@xr, c -> xrout, b -> b/b1}-->
  | | | |   q21 e e b1@xr * * xrout b/b1
  | | | |     +--{ }--{ }-->  [qhuo]
  | | | +--{b = tar + 0b4}--{o -> b4@tc, c -> tcout}-->
  | | |   q22 e e b4@tc * * tcout tar+0b4
  | | |     +--{ }--{ }-->  [qhuo]
  | | +--{b = tar + sic}--{o -> si@tc, c -> xnrout}-->
  | |   q23 e e si@tc * * xnrout tar+sic
  | |     +--{ }--{ }-->  [qhuo]
  | +--{b = id + nop}--{o -> b1@xr, c -> xrout, b -> b/b1}-->
  |   q24 e e b1@xr * * xrout b/b1
  |     +--{ }--{ }-->  [qhuo]
  +--{b = tar + nop}--{o -> b1@tc, c -> tcout, b -> b/b1}-->
    q25 e e b1@tc * * tcout b/b1
      +--{ }--{ }-->  [qhuo]
si := input channel contains stem-init token.

UTC20161026

stem
fixed:
  rol stem
  mem 0
flex:
  [ups inp out smb ctl buf]

nc    := non-clear, =/= '()
sss   := single standard signal
=ctl  := sss with control signal in the correct channel
<full := buffer less than full
full  := buffer full
one   := first amplification tranche
two   := second amplification tranche
three := third amplification tranche
pat   := pattern to amplify
1pat  := all first pattern symbol
2pat  := all second pattern symbol
3pat  := all third pattern symbol

standard signal
nop
[e e e c c c]         ->  [e e e c c c]
acquire input
[ne e e c a <full]    ->  [(clear ups) ups:ne e c a <full]
  process input
 set control rail
[a sss e c c c]       ->  [a (clear inp) e c (set-ctl inp) c]
 write to buffer
[a =ctl e c nc <full] ->  [a (clear inp) e c nc (write-buf inp buf)]
 reject special message
[a sp e c a a]        ->  [a (clear inp) e c a a]
process full buffer
[a e e c nc full]     ->  [a (process-buf buf) (process-buf buf) 
                          (process-buf buf) (clear ctl) (process-buf buf)]
  offer initial output
 a/b/c target - nop
[a e ne c nc full]    ->  [a e ne c nc full]
 self-target - nop
[a e e nc nc full]    ->  [a e e nc nc full]
   flush buffer as FIFO
  self-target
 initial output
[a e e nc nc nc]      ->  [a e (flush-output ctl buf) nc nc (cdr buf)]
 offer flush output - nop
[a e ne nc nc a]      ->  [a e ne ne ne a]
 buffer flushed
[a e e nc nc c]       ->  [a e e nc (clear ctl) c]
  a/b/c target
 initial output - nop
[a e ne c nc full]    ->  [a e ne c nc full]
 initial flush output
[a e e c nc full]     ->  [a e (flush-output ctl buf) c nc (cdr buf)]
 offer flush output - nop
[a e ne c nc a]       ->  [a e ne c nc nc]
 buffer flushed
[a e e c nc c]        ->  [a e e c (clear ctl) c]

special message
[a sp e c c c]  ->  (process-special rol inp)
[a e e sp c c]  ->  (process-smb smb)


UTC20161008 - UTC20161021

The stem buffer contains hidden state that is not naively
reversible. The buffer records a sequence of five control standard
signals, then performs stem operation calculated from the buffer
contents. A token based stem ops alphabet could be used, such that
each operation consumes and emits only one special message
corresponding to the desired stem behavior, requiring no
interpretation of buffer state, but this would increase the number of
context-specific signals in the circuit, and pollute "long-distance"
circuits with effectively no-op signals. Currently, standard signals
never induce an empty operation - wire, proc, and stem cells all
perform a productive, if not desired, behavior upon consuming a
standard signal - unless sent to the self-mailbox of a stem cell.


UTC20160622 - UTC20160625 
Note: Experimenting with stack-appended updates

asm data structure
[ups inp out smb rol mem ctl buf]
ups - upstream neighbor output values
inp - input channel values
out - output channel values
smb - self-mailbox (optional input only value for special messages)
rol - role; wire, proc (processor) or stem cell
mem - memory state; 0 (right rotation) or 1 (left rotation)
ctl - control channel; A (0), B (1), or C (2)
buf - buffer for stem ops, constructed from bit-sliced control inputs

default values
[(_ _ _) (_ _ _) (_ _ _) () stem 0 () ()]
ups, inp, and out values are distinguishable intra-channel as binary
(0,1), thus they must be embedded in a background trinary value set
with an explicit empty symbol (_).

smb, ctl, and buf are not persistent channels, and thus are implicitly
empty when null-valued.

rol has no null value; all cells begin as stem. The cell default is also
the stem cell default.

transitions
fixed fields can only be modified as a result of special messages.
flex fields are immediately modified by standard signals.

Field labels (rol, mem, etc.) refer to the value held by the field on the
LHS of a transition rule.

wire
fixed:
  smb () 
  rol wire
  mem 0/1
  ctl ()
  buf ()
flex:
  [ups inp out]

a  := per field, any valid value
c  := clear, ()
e  := empty, (_ _ _)
ne := non-empty, =/= (_ _ _)
ss := standard signal
sp := special message

standard signal
[e e e]    ->  [e e e]
[e e ne]   ->  [e e ne]
[e ss e]   ->  [e (clear inp) (rotate mem inp)]
[e ss ne]  ->  [e ss ne]
[ne e e]   ->  [(clear ups) ups:ne e]
[ne e ne]  ->  [(clear ups) ups:ne ne]
[ne ss e]  ->  [ne (clear inp) (rotate mem inp)]
[ne ss ne] ->  [ne ss ne]
special message ;;potentially relax to [a sp a]
[a sp e]   ->  (process-special rol inp) 

proc
fixed:
  smb () 
  rol wire
  ctl ()
  buf ()
flex:
  [ups inp out mem]

standard signal
[e e e a]    ->  [e e e a]
[e e ne a]   ->  [e e ne a]
[e ss e a]   ->  [e (clear inp) (rotate mem inp) (switch mem)]
[e ss ne a]  ->  [e ss ne a]
[ne e e a]   ->  [(clear ups) e e a]
[ne e ne a]  ->  [(clear ups) e ne a]
[ne ss e a]  ->  [ne (clear inp) (rotate mem inp) (switch mem)]
[ne ss ne a] ->  [ne ss ne a]
special message ;;potentially relax to [a sp a a]
[a sp e a]   ->  (process-special rol inp) 

stem
fixed:
  rol stem
  mem 0
flex:
  [ups inp out smb ctl buf]

nc    := non-clear, =/= '()
sss   := single standard signal
=ctl  := sss with control signal in the correct channel
<full := buffer less than full
full  := buffer full
one   := first amplification tranche
two   := second amplification tranche
three := third amplification tranche
pat   := pattern to amplify
1pat  := all first pattern symbol
2pat  := all second pattern symbol
3pat  := all third pattern symbol

standard signal
nop
[e e e c c c]        ->  [e e e c c c]
acquire input
[ne e e c a <full]   ->  [(clear ups) ups:ne e c a <full]
set control rail
[a sss e c c c]      ->  [a (clear inp) e c (set-ctl inp) c]
write to buffer
[a =ctl e c nc <full] ->  [a (clear inp) e c nc (write-buf inp buf)]
process full buffer
[a e e c nc full]    ->  [a (process-buf buf) (process-buf buf) 
                          (process-buf buf) (clear ctl) (process-buf buf)]

logical amplifier - first tranche
begin
[a e 1pat c one pat] ->  [a e 1pat c one pat]
[a e ne c one pat]  ->  [a e ne c one pat]
logical amplifier - second tranche
refill
[a e e c one pat]   ->  [a e 2pat c two pat]
[a e ne c two pat]    ->  [a e ne c two pat]
logical amplifier - third tranche
refill
[a e e c two pat]   ->  [a e 3pat c three pat]
end
[a e e c three pat] ->  [a e e c (clear ctl) (clear c)]

special message
[a sp e c c c]  ->  (process-special rol inp)
[a e e sp c c]  ->  (process-smb smb)

UTC20151024

The hardware of a PRC machine must be equally formally specified as
the software which it executes. Further, this formal model must
provide complete "logical coverage" in the sense used by Null
Convention Logic: every process of the hardware must be reflected in
the model which describes it, such that the function of compositions
of primitive hardware elements may be deduced from the composition of
their formal descriptors.

Intuitively, digital logic circuits transmit information by
propagating signals between elements. Elements, e.g. gates, do not
operate until a signal reaches them, nor affect other elements aside
from sending signals. This implies an ordering to events that
corresponds with spatial proximity: signals reach an element, are
processed, and new ones repropagated. In this way, all effects are
local, and can be determined by following a contiguous trace of prior
causes where each successive step identifies a logical transformation
with a transition in space.

A Universal Cell has two primary operational modes: fixed and
fluid. When fixed, a UC performs in the role for which it was
configured during its last fluid phase. The current PRC model
describes UCs as having two fixed roles, "wire" and "proc"
(processor), and one fluid role, "stem", but the general formalism is
extensible to other possibilities. Mathematically, the UC is a Mealy
Machine - a Finite State Machine that reads and writes symbols.

A UC in isolation:

UC = {Q, q0, SIG, GAM, DEL}

Q   := set of all possible UC states
q0  := initial UC state
SIG := set of input symbols
GAM := set of output symbols
DEL := transition function

Cell Activation Flowchart:

Upon activation, a cell checks if there exists input to process. If
none, it pulls from its neighbors for potential input, emptying their
adjacent output channels. If still none, the update ends. If input has
been collected, cell behavior bifurcates on the basis of its current
role. 

Wire and proc role cells classify the input. If input is not
recognizable as special or standard, e.g. by containing a mix of
special messages and standard signals, or more than one special
message, it is bad data: all input channels are cleared, and the
update ends. If input is exactly one special message, the stem-init
command, the cell adopts the stem role, clears its input and output
channels, and the update ends. If input is exactly three standard
signals, output channels are checked. If any output channel is full,
the update ends. If all output channels are empty, the input is
transferred from input to output channels according to the subset of
the cell's RLEM rules governing signal redirection, and the update
ends. A proc role cell further satisfies the memory update portion of
the cell's RLEM rules, toggling its memory state.

A stem role cell classifies the input. 


Two means of wire/proc to stem communication:

Constant time/number of signals, 5 bit command buffer:
If none is currently specified, a standard signal of exactly one high
value sets the A (001), B (010), or C (100) channel as the high
rail. This property is set and the input consumed without modifying
the command buffer. Any subsequent standard signal of exactly one high
value is then interpreted either 1) if identical to the high rail
designation signal, as a appending a "1" to the command buffer or 2)
if different, as appending a "0" to the command buffer.

Variable time/signal count, 5 bit command counter:
If none is specified, a standard signal of exactly one high value sets
the A (001), B (010), or C (100) channel as the command selection
rail. This property is set and the input consumed without modifying
the command buffer. Any subsequent standard signal of exactly one high
value is then interpreted either 1) if identical to the high rail
designation signal, as incrementing the command counter by 1, or 2)

Counter value: 

0 - 7: 
target: self
commands: {standard-signal stem-init wire-r-init wire-l-init
           proc-r-init proc-l-init write-buf-zero write-buf-one}
8 - 15: 
target: A neighbor
commands: {standard-signal stem-init wire-r-init wire-l-init
           proc-r-init proc-l-init write-buf-zero write-buf-one}
16 - 23: 
target: B neighbor
commands: {standard-signal stem-init wire-r-init wire-l-init
           proc-r-init proc-l-init write-buf-zero write-buf-one}
24 - 31: 
target: C neighbor
commands: {standard-signal stem-init wire-r-init wire-l-init
           proc-r-init proc-l-init write-buf-zero write-buf-one}

   (Activation)
        |
        |
        #
UPDATE-CELL-BEGIN
        |
        |
        #
   CHECK-INPUT-input=zeroed-#PULL-FOR-INPUT-input=zeroed-#UPDATE-CELL-END
        |                         |                                 #
        |                         |                                 |
 input=non-zeroed          input=non-zeroed           PROCESS-BAD---+
        |                         |                       #         |
        +------------+------------+                      /          |
                     |                              input=bad       |
                     #                                 /            |
                CHECK-ROLE-role=wire/proc-#CLASSIFY-INPUT           |
                     |                       /         \            |
                     |                      |      input=stem       |
                 role=stem                  |           |           |
                     |               input=standard     |           |
                     |                      |           #           |
                     |                      |       PROCESS-STEM----+
                     #                      #                       |
             STEM-CLASSIFY-INPUT     PROCESS-STANDARD-role=wire-----+
            /        |          \           |                       |
           |    input=special    |      role=proc---#MEM-FLIP-------+
           |         |           |                                  |
      input=standard |       input=bad--#PROCESS-BAD----------------+
           |         #                                              |
           |   STEM-PROCESS-SPECIAL---------------------------------+
           #                                                        |
     STEM-PROCESS-STANDARD------------------------------------------+


PULL-FOR-INPUT:
ai <- ao.nbra
bi <- bo.nbrb
ci <- co.nbrc
{ao.nbra, bo.nbrb, co.nbrc} <- {0, 0, 0}
if {ai, bi, ci} = {0, 0, 0}
   then input <- zeroed
   else input <- non-zeroed

CLASSIFY-INPUT:
standard = {0, 1} x {0, 1} x {0, 1}
special = {0, 0, stem-init} | {0, stem-init, 0} | {stem-init, 0, 0}
bad = {not(standard | special)}

input = case {ai, bi, ci}
             standard => standard
             special  => special
             bad      => bad


FSM
(* 3 2 7 32 7 10 10 10 10 10 10 10 10 10) = 9408000000000
Node:
Role x Memory x High-Pattern x Buffer x Self-mailbox x A-in x B-in x C-in
     x A-out x B-out x C-out

Cell:
Role x Memory x High-Pattern x Buffer x Self-mailbox x A-in x B-in x C-in
     x A-out x B-out x C-out 
     x Neighbor-A-out x Neighbor-B-out x Neighbor-C-out

(role memory high-pattern buffer self-mailbox
      ai bi ci ao bo co nbrao nbrbo nbrco)

(rol mem hig buf smb ai bi ci ao bo co nao nbo nco)

Default Initial:
('stem 0 '() '() '() 0 0 0 0 0 0 0/1 0/1 0/1)

Proc:
Initial:
('proc 0 '() '() '() 0 0 0 0 0 0 0/1 0/1 0/1)

;;;Programs

Init: 
('stem 0/1 '() '() '() 0 0 0 0 0 0 0/1 0/1 0/1)

;;activate
(rol mem hig buf smb ai bi ci ao bo co nao nbo nco)
->
(rol mem hig buf smb ai bi ci ao bo co nao nbo nco)
=> check-for-output

;;check-for-output
(rol mem hig buf smb ai bi ci 0 0 0 nao nbo nco)
-> (rol mem hig buf smb ai bi ci 0 0 0 nao nbo nco)
=> check-for-input

(rol mem hig buf smb ai bi ci ~{0 0 0} nao nbo nco)
-> (rol mem hig buf smb ai bi ci ~{0 0 0} nao nbo nco)
=> collect-input

;;collect-input
(rol mem hig buf '() 0 0 0 ~{0 0 0} nao nbo nco)
-> (rol mem hig buf '() nao nbo nco ~{0 0 0} 0 0 0)
= end-activation

(rol mem hig buf '() 0 0 0 0 0 0 nao nbo nco)
-> (rol mem hig buf '() nao nbo nco 0 0 0 0 0 0)
=> classify-input

;;check-for-input
(rol mem hig buf special-message 0 0 0 0 0 0 nao nbo nco)
-> (rol mem buf hig special-message 0 0 0 0 0 0 nao nbo nco)
=> process-special-message

(rol mem hig buf '() ~{0 0 0} 0 0 0 nao nbo nco)
-> (rol mem hig buf '() ~{0 0 0} 0 0 0 nao nbo nco)
=> classify-input

(rol mem hig buf '() 0 0 0 0 0 0 nao nbo nco)
-> (rol mem hig buf '() 0 0 0 0 0 0 nao nbo nco)
=> collect-input

;;classify-input
(rol mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
-> (rol mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
=> process-standard-signal

(rol mem hig buf '() special-message 0 0 0 0 0 nao nbo nco)
(rol mem hig buf '() 0 special-message 0 0 0 0 nao nbo nco)
(rol mem hig buf '() 0 0 special-message 0 0 0 nao nbo nco)
-> (rol mem hig buf '() special-message 0 0 0 0 0 nao nbo nco)
   (rol mem hig buf '() 0 special-message 0 0 0 0 nao nbo nco)
   (rol mem hig buf '() 0 0 special-message 0 0 0 nao nbo nco)
=> process-special-message

(rol mem hig buf '() 0 0 0 0 0 0 0 0 0)
-> (rol mem hig buf '() 0 0 0 0 0 0 0 0 0)
=> end-activation

;;process-standard-signal
(stem mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
(wire mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
(proc mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
-> (stem mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
   (wire mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
   (proc mem hig buf '() {{0 0 1} ... {1 1 1}} 0 0 0 nao nbo nco)
=> stem-process-standard-signal
   wire-process-standard-signal
   proc-process-standard-signal

;;process-special-message
(wire mem hig buf '() {{0 0 special-message} ... {special-message 0 0}} 0 0 0 nao nbo nco)
(proc mem hig buf '() {{0 0 special-message} ... {special-message 0 0}} 0 0 0 nao nbo nco)
(stem mem hig buf '() {{0 0 special-message} ... {special-message 0 0}} 0 0 0 nao nbo nco)
-> (wire mem hig buf '() 0 0 0 0 0 0 nao nbo nco)
   (proc mem hig buf '() 0 0 0 0 0 0 nao nbo nco)
   (stem mem hig buf '() 0 0 0 0 0 0 nao nbo nco)
=> {special-message}
   {special-message}
   {special-message}

;;wire-process-standard-signal
(wire 0 hig buf '() ai bi ci 0 0 0 nao nbo nco)
-> (wire 0 hig buf '() 0 0 0 ci ai bi nao nbo nco)
=> end-activation

(wire 1 hig buf '() ai bi ci 0 0 0 nao nbo nco)
-> (wire 1 hig buf '() 0 0 0 bi ci ai nao nbo nco)
=> end-activation

;;proc-process-standard-signal
(proc 0 hig buf '() ai bi ci 0 0 0 nao nbo nco)
-> (proc 1 hig buf '() 0 0 0 ci ai bi nao nbo nco)
=> end-activation

(proc 1 hig buf '() ai bi ci 0 0 0 nao nbo nco)
-> (proc 0 hig buf '() 0 0 0 bi ci ai nao nbo nco)
=> end-activation

;;stem-process-standard-signal
;no hig set, input not zeroes
(stem mem '() '() '() ~{0 0 0} 0 0 0 nao nbo nco)
-> (stem mem {ai bi ci} '() '() 0 0 0 0 0 0 nao nbo nco)
=> end-activation

;hig set, buffer not filled, input doesn't match
(stem mem ~{0 0 0} {{0} ... {1 1 1}} '() ~{hig} 0 0 0 nao nbo nco)
-> (stem mem hig {{0 0} ... {1 1 1 0}} '() 0 0 0 0 0 0 nao nbo nco)
=> end-activation

;hig set, buffer not filled, input does match 
(stem mem ~{0 0 0} {{0} ... {1 1 1}} '() {hig} 0 0 0 nao nbo nco)
-> (stem mem hig {{0 1} ... {1 1 1 1}} '() 0 0 0 0 0 0 nao nbo nco)
=> end-activation

;hig set, buffer filled, input doesn't match
(stem mem ~{0 0 0} {{0 0 0 0} ... {1 1 1 1}} '() ~{hig} 0 0 0 nao nbo nco)
-> (stem mem hig {{0 0 0 0 0} ... {1 1 1 1 0}} '() 0 0 0 0 0 0 nao nbo nco)
=> process-buffer

;hig set, buffer filled, input does match
(stem mem ~{0 0 0} {{0 0 0 0} ... {1 1 1 1}} '() {hig} 0 0 0 nao nbo nco)
-> (stem mem '() {{0 0 0 0 1} ... {1 1 1 1 1}} '() 0 0 0 0 0 0 nao nbo nco)
=> process-buffer

;;process-buffer
;32 cases of (target, message) pairs
(stem mem hig '(0 0 {{0 0 0} ... {1 1 0}}) '() 0 0 0 0 0 0 nao nbo nco)
(stem mem hig '(0 1 {{0 0 0} ... {1 1 0}}) '() 0 0 0 0 0 0 nao nbo nco)
(stem mem hig '(1 0 {{0 0 0} ... {1 1 0}}) '() 0 0 0 0 0 0 nao nbo nco)
(stem mem hig '(1 1 {{0 0 0} ... {1 1 0}}) '() 0 0 0 0 0 0 nao nbo nco)
-> (stem mem hig '() {special-message} 0 0 0 0 0 0 nao nbo nco)
   (stem mem hig '() '() 0 0 0 {special-message} 0 0 nao nbo nco)
   (stem mem hig '() '() 0 0 0 0 {special-message} 0 nao nbo nco)
   (stem mem hig '() '() 0 0 0 0 0 {special-message} nao nbo nco)
=> {stem-process-special-message}
   end-activation
   end-activation
   end-activation

;;stem-process-special-message
(stem mem hig '() {special-message} 0 0 0 0 0 0 nao nbo nco)
-> (stem mem hig '() '() 0 0 0 0 0 0 nao nbo nco)
=> {special-message}

;;stem-init
(stem mem hig '() '(stem-init) 0 0 0 0 0 0 nao nbo nco)
-> (stem 0 '() '() '() 0 0 0 0 0 0 nao nbo nco)
=> end-activation

